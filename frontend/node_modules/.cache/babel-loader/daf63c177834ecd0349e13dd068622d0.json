{"ast":null,"code":"class Api {\n  constructor(options) {\n    this.url = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  _handleFetch(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this.url}/users/me`, {\n      method: 'GET',\n      headers: this.headers\n    }).then(res => this._handleFetch(res));\n  }\n\n  getInitialCards() {\n    return fetch(`${this.url}/cards`, {\n      method: 'GET',\n      headers: this.headers\n    }).then(res => this._handleFetch(res));\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this.url}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => this._handleFetch(res));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return this.addLike(id);\n    } else {\n      return this.removeLike(id);\n    }\n  }\n\n  removeLike(id) {\n    return fetch(`${this.url}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => this._handleFetch(res));\n  }\n\n  addLike(id) {\n    return fetch(`${this.url}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this.headers\n    }).then(res => this._handleFetch(res));\n  }\n\n  deleteCard(elementId) {\n    return fetch(`${this.url}/cards/${elementId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => this._handleFetch(res));\n  }\n\n  setUserInfo(name, about) {\n    return fetch(`${this.url}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => this._handleFetch(res));\n  }\n\n  updateAvatar(link) {\n    return fetch(`${this.url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(res => this._handleFetch(res));\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-32',\n  headers: {\n    authorization: '78a9a2e8-0028-4357-9dc5-3dfee740ccb0',\n    'Content-Type': 'application/json'\n  }\n});\nexport { api };","map":{"version":3,"sources":["/Users/vsevolodmarkov/Documents/dev/react-mesto-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","options","url","baseUrl","headers","_handleFetch","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","getInitialCards","addNewCard","name","link","body","JSON","stringify","changeLikeCardStatus","id","isLiked","addLike","removeLike","deleteCard","elementId","setUserInfo","about","updateAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this.url = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  _handleFetch(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this.url}/users/me`, {\n      method: 'GET',\n      headers: this.headers\n    })\n      .then(res => this._handleFetch(res));\n\n  }\n\n  getInitialCards() {\n    return fetch(`${this.url}/cards`, {\n      method: 'GET',\n      headers: this.headers\n    })\n      .then(res => this._handleFetch(res));\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this.url}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    })\n      .then(res => this._handleFetch(res))\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return this.addLike(id);\n    } else {\n      return this.removeLike(id);\n    }\n  }\n\n  removeLike(id) {\n    return fetch(`${this.url}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this.headers\n    })\n      .then(res => this._handleFetch(res));\n  }\n\n  addLike(id) {\n    return fetch(`${this.url}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this.headers\n    })\n      .then(res => this._handleFetch(res));\n  }\n\n\n  deleteCard(elementId) {\n    return fetch(`${this.url}/cards/${elementId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    })\n      .then(res => this._handleFetch(res));\n  }\n\n  setUserInfo(name, about) {\n    return fetch(`${this.url}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n      .then(res => this._handleFetch(res));\n  }\n\n  updateAvatar(link) {\n    return fetch(`${this.url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    })\n      .then(res => this._handleFetch(res));\n  }\n}\n\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-32',\n  headers: {\n    authorization: '78a9a2e8-0028-4357-9dc5-3dfee740ccb0',\n    'Content-Type': 'application/json'\n  }\n})\n\nexport {api};\n"]},"metadata":{},"sourceType":"module"}